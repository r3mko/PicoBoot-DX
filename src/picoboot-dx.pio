 ; Copyright (c) 2022 Maciej Kobus
 ; Copyright (c) 2023 Remko Kleinjan
 ;
 ; SPDX-License-Identifier: GPL-2.0-only

.define PUBLIC CS_PIN      4    ; U10 chip select
.define PUBLIC CLK_PIN     5    ; EXI clock signal

.program on_transfer

start:
    wait 1 pin 0                ; Wait for CS to go HIGH
    wait 0 pin 0                ; Wait for CS to go LOW
    jmp x-- start
    irq set 0                   ; Set IRQ flag to start injecting payload

next_transfer:
.wrap_target
    wait 1 pin 0                ; Wait for CS to go HIGH
    wait 0 pin 0                ; Wait for CS to go LOW
    irq set 0                   ; Let other SM inject the payload
    wait 1 pin 1                ; Hold until CLK goes HIGH
.wrap

.program clocked_output

start:
    set x, 31                   ; x - 32 bits we need to skip (address)
    wait 1 irq 0                ; Hold until SM0 tells us to start injecting

wait_bit:
    wait 0 gpio CLK_PIN         ; Seems to be slighty faster than "wait 0 pin 1"?
    wait 1 gpio CLK_PIN
    jmp x-- wait_bit            ; Skip past address bytes
    mov x, y                    ; Copy y value to x, it represents number of bits in the transfer
    set pindirs 0b11111         ; Set data line as output

on_rising_edge:
    wait 0 gpio CLK_PIN         ; Sample until rising edge on CLK line
    wait 1 gpio CLK_PIN

write_bit:
    out pins, 2                 ; Output single IPL bit over 2 GPIOs (2 bits of our payload)
    jmp x-- on_rising_edge      ; Jump back to next clock pulse wait routine if there is more data to inject

    jmp !osre start             ; If there is more data in OSR, go back to start routine and wait for another transfer

    ;set pins 0b10000 [3]        ; Output pulse on debug line
    ;set pins 0b00000
    
    set pindirs 0b10000         ; Leave data line floating so RTC-DOL can take over and load fonts etc.

disable_chip:
    jmp disable_chip            ; Stay in the loop forever until power cycle
